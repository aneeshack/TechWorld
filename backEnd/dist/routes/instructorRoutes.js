"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.instructorService = void 0;
const express_1 = require("express");
const InstructorController_1 = require("../controllers/InstructorController");
const instructorRepository_1 = require("../repository/instructorRepository");
const instructorService_1 = require("../services/instructorService");
const instructorAuth_1 = require("../middlewares/instructorAuth");
const s3ServiceInstance_1 = __importDefault(require("../services/s3ServiceInstance"));
const instructorRouter = (0, express_1.Router)();
const instructorRepository = new instructorRepository_1.InstructorRepository();
exports.instructorService = new instructorService_1.InstructorService(instructorRepository, s3ServiceInstance_1.default);
const instructorController = new InstructorController_1.InstructorController(exports.instructorService);
instructorRouter.get('/fetchCategories', instructorAuth_1.authenticateInstructor, instructorController.fetchCategories.bind(instructorController));
instructorRouter.get('/allCourses', instructorAuth_1.authenticateInstructor, instructorController.fetchAllCourses.bind(instructorController));
instructorRouter.get('/course/:courseId', instructorAuth_1.authenticateInstructor, instructorController.fetchSingleCourse.bind(instructorController));
instructorRouter.post('/course/add', instructorAuth_1.authenticateInstructor, instructorController.createCourse.bind(instructorController));
instructorRouter.put('/course/edit/:courseId', instructorAuth_1.authenticateInstructor, instructorController.updateCourse.bind(instructorController));
instructorRouter.patch('/course/publish/:courseId', instructorAuth_1.authenticateInstructor, instructorController.publishCourse.bind(instructorController));
instructorRouter.post('/lesson/getPresignedUrl', instructorAuth_1.authenticateInstructor, instructorController.getPresignedUrl.bind(instructorController));
instructorRouter.post('/lesson/add', instructorAuth_1.authenticateInstructor, instructorController.addLesson.bind(instructorController));
instructorRouter.get('/lessons/:courseId', instructorAuth_1.authenticateInstructor, instructorController.fetchAllLessons.bind(instructorController));
instructorRouter.get('/lesson/:lessonId', instructorAuth_1.authenticateInstructor, instructorController.fetchSingleLesson.bind(instructorController));
instructorRouter.put('/lesson/:lessonId', instructorAuth_1.authenticateInstructor, instructorController.updateLesson.bind(instructorController));
instructorRouter.post('/lesson/:lessonId/assessment', instructorAuth_1.authenticateInstructor, instructorController.addOrUpdateAssessment.bind(instructorController));
instructorRouter.get('/lesson/getPresignedUrlForVideo/:lessonId', instructorAuth_1.authenticateInstructor, instructorController.presSignedUrlForVideo.bind(instructorController));
instructorRouter.get('/profile/:userId', instructorAuth_1.authenticateInstructor, instructorController.getInstructorProfile.bind(instructorController));
instructorRouter.put('/profile/:userId', instructorAuth_1.authenticateInstructor, instructorController.updateProfile.bind(instructorController));
exports.default = instructorRouter;
