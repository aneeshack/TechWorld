"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.studentService = void 0;
const express_1 = require("express");
const studentAuth_1 = require("../middlewares/studentAuth");
const studentRepository_1 = require("../repository/studentRepository");
const studentService_1 = require("../services/studentService");
const studentController_1 = require("../controllers/studentController");
const instructorRoutes_1 = require("./instructorRoutes");
const studentRouter = (0, express_1.Router)();
const studentRepository = new studentRepository_1.StudentRepository();
exports.studentService = new studentService_1.StudentService(studentRepository);
const studentController = new studentController_1.StudentController(exports.studentService, instructorRoutes_1.instructorService);
studentRouter.get('/profile/:userId', studentAuth_1.authenticateStudent, studentController.getProfile.bind(studentController));
studentRouter.put('/profile/:userId', studentAuth_1.authenticateStudent, studentController.updateProfile.bind(studentController));
studentRouter.get('/payment/:userId', studentAuth_1.authenticateStudent, studentController.getStudentPayments.bind(studentController));
studentRouter.get('/course/:courseId', studentAuth_1.authenticateStudent, studentController.fetchSingleCourse.bind(studentController));
studentRouter.get('/lessons/:courseId', studentAuth_1.authenticateStudent, studentController.fetchAllLessons.bind(studentController));
studentRouter.get('/lesson/getPresignedUrlForVideo/:lessonId', studentAuth_1.authenticateStudent, studentController.presSignedUrlForVideo.bind(studentController));
studentRouter.get('/lesson/:lessonId', studentAuth_1.authenticateStudent, studentController.fetchSingleLesson.bind(studentController));
// studentRouter.post('/assessment/submit',authenticateStudent, studentController.submitAssessment.bind(studentController));
studentRouter.post('/enrollment/updateProgress', studentAuth_1.authenticateStudent, studentController.updateLessonProgress.bind(studentController));
studentRouter.get('/enrolled/:userId', studentAuth_1.authenticateStudent, studentController.fetchEnrolledCourses.bind(studentController));
studentRouter.get('/enrollment/:courseId', studentAuth_1.authenticateStudent, studentController.getEnrollment.bind(studentController));
studentRouter.post('/review/add/:courseId', studentAuth_1.authenticateStudent, studentController.updateReview.bind(studentController));
studentRouter.get('/review/get/:courseId', studentAuth_1.authenticateStudent, studentController.getStudentReview.bind(studentController));
exports.default = studentRouter;
