"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const adminController_1 = require("../controllers/adminController");
const validateUserId_1 = require("../middlewares/validateUserId");
const handleValidationErrors_1 = require("../middlewares/handleValidationErrors");
const adminRepository_1 = require("../repository/adminRepository");
const adminService_1 = require("../services/adminService");
const adminAuth_1 = require("../middlewares/adminAuth");
const s3ServiceInstance_1 = __importDefault(require("../services/s3ServiceInstance"));
const adminRouter = (0, express_1.Router)();
const adminRepository = new adminRepository_1.AdminRepository();
const adminService = new adminService_1.AdminService(adminRepository, s3ServiceInstance_1.default);
const adminController = new adminController_1.AdminController(adminService);
adminRouter.get('/instructorRequests', adminAuth_1.authenticateAdmin, adminController.instructorRequests.bind(adminController));
adminRouter.get('/instructorRequests/rejected', adminAuth_1.authenticateAdmin, adminController.rejectedInstructors.bind(adminController));
adminRouter.patch('/request/approve/:userId', adminAuth_1.authenticateAdmin, validateUserId_1.validateUserId, handleValidationErrors_1.handleValidationErrors, adminController.approveInstructor.bind(adminController));
adminRouter.patch('/request/reject/:userId', adminAuth_1.authenticateAdmin, validateUserId_1.validateUserId, handleValidationErrors_1.handleValidationErrors, adminController.rejectInstructor.bind(adminController));
adminRouter.get('/users', adminAuth_1.authenticateAdmin, adminController.getAllUsers.bind(adminController));
adminRouter.patch('/user/block/:userId', adminAuth_1.authenticateAdmin, validateUserId_1.validateUserId, handleValidationErrors_1.handleValidationErrors, adminController.blockUser.bind(adminController));
adminRouter.patch('/user/unblock/:userId', adminAuth_1.authenticateAdmin, validateUserId_1.validateUserId, handleValidationErrors_1.handleValidationErrors, adminController.unBlockUser.bind(adminController));
adminRouter.post('/category/get-presigned-url', adminAuth_1.authenticateAdmin, adminController.getPresignedUrl.bind(adminController));
adminRouter.post('/category/add', adminAuth_1.authenticateAdmin, adminController.addCategory.bind(adminController));
adminRouter.get('/category/add', adminAuth_1.authenticateAdmin, adminController.addCategory.bind(adminController));
adminRouter.get('/categories', adminAuth_1.authenticateAdmin, adminController.getAllCategories.bind(adminController));
adminRouter.get('/category/:categoryId', adminAuth_1.authenticateAdmin, adminController.getSingleCategory.bind(adminController));
adminRouter.put('/category/update/:categoryId', adminAuth_1.authenticateAdmin, adminController.editCategory.bind(adminController));
adminRouter.get('/category/getPresignedUrl/:categoryId', adminAuth_1.authenticateAdmin, adminController.getPresignedUrlForImage.bind(adminController));
adminRouter.get('/salesReport', adminAuth_1.authenticateAdmin, adminController.fetchPayments.bind(adminController));
exports.default = adminRouter;
